export type UserRole = "super_admin" | "hr" | "supplier" | "employee";

export type OfferStatus = "pending" | "approved" | "rejected" | "expired";

export type OfferCategory =
  | "food"
  | "fitness"
  | "entertainment"
  | "travel"
  | "retail"
  | "technology"
  | "other";

export type OfferRedemptionType = "online" | "branch";

export type OfferUsageLimit =
  | "once_per_employee"
  | "multiple_uses"
  | "unlimited";

export type DiscountCodeType = "auto_generated" | "supplier_provided";

export interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  role: UserRole;
  department?: string;
  joinDate: string;
  isActive: boolean;
  avatar?: string;
  lastLogin?: string;
}

export interface Supplier extends User {
  companyName: string;
  contactPhone?: string;
  website?: string;
  description?: string;
}

export interface Employee extends User {
  employeeId: string;
  manager?: string;
  pointsBalance: number;
}

export interface Offer {
  id: string;
  title: string;
  description: string;
  discountPercentage: number;
  category: OfferCategory;
  expiryDate: string;
  imageUrl?: string;
  status: OfferStatus;
  supplierId: string;
  supplierName: string;
  createdAt: string;
  updatedAt: string;
  views: number;
  redemptions: number;
  pointsCost: number;
  location?: string;
  termsConditions?: string;
  maxRedemptions?: number;
  remainingRedemptions?: number;
  redemptionType: OfferRedemptionType;
  websiteUrl?: string; // For online offers
  branchAddress?: string; // For branch offers
  usageLimit: OfferUsageLimit;
  usesPerEmployee?: number; // For multiple_uses type
  discountCodeType?: DiscountCodeType; // For online offers
  supplierDiscountCode?: string; // When supplier provides their own code
  autoGeneratedCodes?: string[]; // Generated codes for employees
  adminNotes?: string; // Admin review notes visible to supplier
  rejectReason?: string; // Reason for rejection sent to supplier
  reviewedAt?: string; // When the offer was reviewed by admin
}

export interface Redemption {
  id: string;
  offerId: string;
  employeeId: string;
  redeemedAt: string;
  pointsUsed: number;
  status: "active" | "used" | "expired";
  offer: Offer;
  employee: Employee;
}

export interface DashboardStats {
  totalUsers: number;
  totalOffers: number;
  totalRedemptions: number;
  activeEmployees: number;
  pendingOffers: number;
  topOffers: Offer[];
  recentActivity: ActivityLog[];
  monthlyGrowth: {
    users: number;
    offers: number;
    redemptions: number;
  };
}

export interface ActivityLog {
  id: string;
  userId: string;
  userName: string;
  action: string;
  timestamp: string;
  details?: any;
}

export interface AnalyticsData {
  totalUsers: number;
  activeOffers: number;
  totalRedemptions: number;
  usersByRole: Record<UserRole, number>;
  offersByCategory: Record<OfferCategory, number>;
  redemptionsByMonth: Array<{
    month: string;
    count: number;
  }>;
  topSuppliers: Array<{
    id: string;
    name: string;
    offers: number;
    redemptions: number;
  }>;
  employeeEngagement: Array<{
    department: string;
    activeUsers: number;
    totalUsers: number;
    engagementRate: number;
  }>;
}

export interface FilterOptions {
  category?: OfferCategory;
  supplier?: string;
  location?: string;
  priceRange?: [number, number];
  pointsRange?: [number, number];
  sortBy?: "newest" | "oldest" | "discount" | "expiry" | "popularity";
  searchTerm?: string;
}

export interface CreateOfferData {
  title: string;
  description: string;
  discountPercentage: number;
  category: OfferCategory;
  expiryDate: string;
  imageFile?: File;
  pointsCost: number;
  location?: string;
  termsConditions?: string;
  maxRedemptions?: number;
  redemptionType: OfferRedemptionType;
  websiteUrl?: string;
  branchAddress?: string;
  usageLimit: OfferUsageLimit;
  usesPerEmployee?: number;
  discountCodeType?: DiscountCodeType;
  supplierDiscountCode?: string;
}

export interface UpdateUserData {
  firstName?: string;
  lastName?: string;
  email?: string;
  department?: string;
  role?: UserRole;
  isActive?: boolean;
}

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface RegisterData {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  role: UserRole;
  department?: string;
  companyName?: string; // For suppliers
  employeeId?: string; // For employees
}

export interface DiscountCard {
  id: string;
  employeeId: string;
  employeeName: string;
  employeeDepartment: string;
  companyName: string;
  offerId: string;
  offerTitle: string;
  supplierName: string;
  discountPercentage: number;
  generatedAt: string;
  expiryDate: string;
  barcode: string;
  branchAddress?: string;
  discountCode?: string; // For online offers
  isUsed?: boolean;
  usedAt?: string;
}

export interface EmployeeOfferUsage {
  id: string;
  employeeId: string;
  offerId: string;
  usageCount: number;
  lastUsedAt: string;
  discountCards: DiscountCard[];
  discountCodes: string[];
}

export type MessageType = "direct" | "support" | "review";
export type MessageStatus = "unread" | "read" | "replied" | "closed";
export type ReviewStatus = "pending" | "approved" | "rejected" | "needs_review";

export interface Message {
  id: string;
  type: MessageType;
  subject: string;
  content: string;
  senderId: string;
  senderName: string;
  senderRole: UserRole;
  recipientId: string;
  recipientName: string;
  recipientRole: UserRole;
  status: MessageStatus;
  reviewStatus?: ReviewStatus;
  reviewNotes?: string;
  attachments?: string[];
  priority: "low" | "medium" | "high";
  createdAt: string;
  updatedAt: string;
  readAt?: string;
  repliedAt?: string;
}

export interface SupportTicket extends Message {
  ticketNumber: string;
  category:
    | "technical"
    | "billing"
    | "feature_request"
    | "bug_report"
    | "other";
  department?: string;
  assignedTo?: string;
  resolution?: string;
  closedAt?: string;
}

export interface CompanyAnalytics {
  totalEmployees: number;
  activeEmployees: number;
  totalCouponsRedeemed: number;
  totalPointsSpent: number;
  departmentBreakdown: {
    [department: string]: {
      employeeCount: number;
      couponsRedeemed: number;
      pointsSpent: number;
    };
  };
  monthlyTrends: {
    month: string;
    couponsRedeemed: number;
    pointsSpent: number;
  }[];
}

export interface NotificationPreferences {
  emailNotifications: boolean;
  pushNotifications: boolean;
  offerUpdates: boolean;
  redemptionConfirmations: boolean;
  weeklyDigest: boolean;
}

export interface PaginationParams {
  page: number;
  limit: number;
  sortBy?: string;
  sortOrder?: "asc" | "desc";
}

export interface ApiResponse<T> {
  data: T;
  message: string;
  success: boolean;
  pagination?: {
    currentPage: number;
    totalPages: number;
    totalItems: number;
    itemsPerPage: number;
  };
}

export interface ErrorResponse {
  message: string;
  errors?: Record<string, string[]>;
  success: false;
}
